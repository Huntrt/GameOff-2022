{
	"Awake Function":
	{
		"prefix": "Awake()",
		"body": "void Awake()\n{\n\t$0\n}",
		"description": "Awake is called when the script instance is being loaded"
	},
	"OnEnable Function":
	{
		"prefix": "OnEnable()",
		"body": "void OnEnable()\n{\n\t$0\n}",
		"description": "OnEnable is called when the object becomes enabled and active."
	},
	"Start Function":
	{
		"prefix": "Start()",
		"body": "void Start()\n{\n\t$0\n}",
		"description": "Start is called on the frame when a script is enabled just before any of the Update methods are called the first time."
	},
	"Update Function":
	{
		"prefix": "Update()",
		"body": "void Update()\n{\n\t$0\n}",
		"description": "Update is called every frame, if the MonoBehaviour is enabled."
	},
	"LateUpdate Function":
	{
		"prefix": "LateUpdate()",
		"body": "void LateUpdate()\n{\n\t$0\n}",
		"description": "LateUpdate is called after all Update functions have been called."
	},
	"FixedUpdate Function":
	{
		"prefix": "FixedUpdate()",
		"body": "void FixedUpdate()\n{\n\t$0\n}",
		"description": "FixedUpdate is frame-rate independent use for physics calculations."
	},
	"OnDisable Function":
	{
		"prefix": "OnDisable()",
		"body": "void OnDisable()\n{\n\t$0\n}",
		"description": "OnDisable is called when the behaviour becomes disabled."
	},
	"OnDestroy Function":
	{
		"prefix": "OnDestroy()",
		"body": "void OnDestroy()\n{\n\t$0\n}",
		"description": "OnDestroy is called when the behaviour got destroy."
	},
	"OnPointerEnter Function":
	{
		"prefix": "OnPointerEnter()",
		"body": "//! Add IPointerEnterHandler next to MonoBehaviour (function need to be public)\npublic void OnPointerEnter(PointerEventData eventData)\n{\n\t$0\n}",
		"description": "OnPointerEnter is called when the cursor ENTER the rect area of this selectable UI object"
	},
	"OnPointerExit Function":
	{
		"prefix": "OnPointerExit()",
		"body": "//! Add IPointerExitHandler next to MonoBehaviour (function need to be public)\npublic void OnPointerExit(PointerEventData eventData)\n{\n\t$0\n}",
		"description": "OnPointerExit is called when the cursor EXITS the rect area of this selectable UI object"
	},
	"Quick Input Setup":
	{
		"prefix": "SetupInput",
		"body": "if(Input.GetKey(KeyCode.))\n{\n\t$0\n}",
		"description": "Quick way to set up key input"
	},
	"Getting mouse position":
	{
		"prefix": "GetMousePosition",
		"body": "(Vector2)Camera.main.ScreenToWorldPoint(Input.mousePosition)",
		"description": "Getting the mouse position in vector 2"
	},
	"Switch case":
	{
		"prefix": "switch+case",
		"body": "switch(case)\n{\n\tcase requirement:\n\t\t///Code ...\n\tbreak;\n}",
		"description": "The basic switch case"
	},
	"While loop in coroutine":
	{
		"prefix": "whilecorou",
		"body": "while(condition)\n{\n\tif(condition){/*exit while condition*/}\n\tyield return null;\n}",
		"description": "Using while loop in the coroutine then using if to exit that while loop"
	},
	"Fast singleton":
	{
		"prefix": "singleton",
		"body": "//Set this class to singleton\npublic static Class i {get{if(_i==null){_i = GameObject.FindObjectOfType<Class>();}return _i;}} static Class _i;",
		"description": "An quick and simple singleton template"
	},
	"On Scene Loaded Function":
	{
		"prefix": "OnSceneLoaded",
		"body": "void OnEnable() {SceneManager.sceneLoaded += OnSceneLoaded;}\nvoid OnDisable() {SceneManager.sceneLoaded -= OnSceneLoaded;}\nvoid OnSceneLoaded(Scene scene, LoadSceneMode mode) {//Code here...}",
		"description": "Function that listen to on scene loaded event"
	},
	"One script in whole game":
	{
		"prefix": "SingleDontDestroyOnLoad",
		"body": "public static Class i;\n\nvoid Awake()\n{\n\t//Only don't destroy on load if haven't then destroy any duplicate\n\tif(i == null) {i = this; DontDestroyOnLoad(this);} else {Destroy(gameObject);}\n}",
		"description": "An line of code that only allow one instance of an script in the whole game"
	},
	"While loop with an failsafe":
	{
		"prefix": "whileSafe",
		"body": "int failsafe = 1000; while (failsafe > 0)\n{\n\tfailsafe--;\n}",
		"description": "while loop but with an fail safe that let it loop set amount of time"
	}
}